# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: 🛠️ Tests

on:
  # It is not really avoidable to run the tests twice on the commit.
  # if i want to make sure that only repos that have passed the test are
  # deployed.
  # no more testing on push from dev, because I'm not going to push to a main or dev without
  # an active PR
  pull_request:
    types: [opened, reopened, synchronize]
    
env:
  # How to get the name of the branch (see: https://stackoverflow.com/a/71158878)
  branch_name: ${{ github.head_ref || github.ref_name }} 
  COMMIT_MSG: ${{ github.event.head_commit.message }}
  skip: "false"

jobs:
  decide-to-test:
    name: "Test decision"
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.changes.outputs.src }}
      tagged_commit: ${{ steps.check_commit.outputs.tagged_commit }}
      commit_message: ${{ steps.pr-last-commit-message.outputs.tagged_commit }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   

      # this method is currently redundant, but I'm keeping it, because this may be more reliable than 
      # the following method
      - name: List PR commit messages
        id: pr-last-commit-message
        run: |
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits" | \
          jq -r '.[].commit.message' > pr-commits.txt
          commit_msg=$(cat pr-commits.txt | head -n 1)
          echo "latest_commit message from parent branch: '$commit_msg"
          echo "latest_commit=$commit_msg" >> $GITHUB_OUTPUT

      # this catches the commit which is made by the bumpver commit on the PR
      - name: Check if commit message contains "bump version"
        id: check_commit
        run: |
          msg=$(git log -n 1 --skip 1 --pretty=format:"%s")
          echo "Commit message: ${msg}"
          if [[ "${msg}" =~ ^bump\ version\ [0-9]+\.[0-9]+\.[0-9]+?[a-zA-Z]+?[0-9]+\ -\>\ [0-9]+\.[0-9]+\.[0-9]+?[a-zA-Z]+?[0-9]+$ ]]; then
            echo "tagged_commit=true" >> "$GITHUB_OUTPUT"
          else
            echo "tagged_commit=false" >> "$GITHUB_OUTPUT"
          fi

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - ".github/workflows/python-test.yml"
              - "pymob/**/*.py"
              - "tests/**/*.py"
              - "*.py"
              - "pyproject.toml"
              - "scripts/*.sh"

  test:
    name: 🧪 Unit Tests
    needs: decide-to-test
    if:  ${{ needs.decide-to-test.outputs.changes == 'true' && needs.decide-to-test.outputs.tagged_commit == 'false' }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
    
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        pip install .[pyabc,pymoo,interactive,numpyro]
        pip install -e case_studies/lotka_volterra_case_study

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest tests/

    - name: Save test results (ubuntu,mac)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        mkdir -p test_results/ 
        # locally store a file of test results for each test in the matrix
        echo "TEST:OK" > test_results/${{ env.branch_name }}_${{ matrix.os }}_${{ matrix.python-version }}.txt

    - name: Save test results (windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        mkdir test_results/ 
        # locally store a file of test results for each test in the matrix
        echo "TEST:OK" > "test_results\$env:BRANCH_NAME_$($env:OS)_$($env:PYTHON_VERSION).txt"
            
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: test_results/*.txt
        
  upload-test-results:
    # creates one artifact 'test-results' for the entire test matrix with all files
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: test_results/
          merge-multiple: true
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results/*.txt